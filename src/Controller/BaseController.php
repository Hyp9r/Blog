<?php


namespace App\Controller;



use App\Entity\User;
use App\Form\SearchType;
use App\Service\PostService;
use App\Service\UserService;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

abstract class BaseController extends AbstractController
{
    /**
     * @var Request
     */
    protected $request;

    /**
     * @var PostService
     */
    protected $postService;

    /**
     * @var UserService
     */
    protected $userService;

    /**
     * BaseController constructor.
     * @param Request $request
     * @param PostService $postService
     * @param UserService $userService
     */
    public function __construct(Request $request, PostService $postService, UserService $userService)
    {
        $this->request = $request;
        $this->postService = $postService;
        $this->userService = $userService;
    }


    protected function render(string $view, array $parameters = [], Response $response = null): Response
    {
        $searchForm = $this->createForm(SearchType::class);
        $searchForm->handleRequest($this->request);

        if($searchForm->isSubmitted() && $searchForm->isValid()){

            $data = $this->request->get('search')['text'];
            $posts = $this->postService->searchPostsByKeyword($data);
            $postsByUser = $this->postService->searchPostsByUser($data);
            $users = $this->userService->search($data);
            if(!empty($posts) || !empty($users)){
                return parent::render('search.html.twig', ['posts' => $posts, 'postsByUser' => $postsByUser, 'users' => $users, 'searchForm' => $searchForm->createView()]);
            }
        }
        $parameters = array_merge($parameters, ['searchForm' => $searchForm->createView()]);

        return parent::render($view, $parameters, $response); // TODO: Change the autogenerated stub
    }
}